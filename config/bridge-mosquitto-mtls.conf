bridges {
  mqtt {
    "mosquitto-tls" {
      bridge_mode = false
      clean_start = true
      egress {
        remote {
          payload = "${payload}"
          qos = 1
          retain = false
          topic = "t/emqx/${topic}"
        }
      }
      enable = true
      keepalive = "60s"
      mode = "cluster_shareload"
      proto_ver = "v4"
      resource_opts {
        async_inflight_window = 100
        auto_restart_interval = "20s"
        health_check_interval = "10s"
        max_queue_bytes = "10MB"
        query_mode = "sync"
        worker_pool_size = 4
      }
      retry_interval = "5s"
      server = "mosquitto:8883"
      ssl {
        enable = true
        cacertfile = "/etc/mosquitto/tls/ca.crt"
        certfile = "/etc/mosquitto/tls/client.crt"
        keyfile = "/etc/mosquitto/tls/client.key"
        verify = "verify_peer"
        server_name_indication = "mosquitto"
      }
    }
  }
}

rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  jq_implementation_module = "jq_nif"
  rules {
    "rule_mosquitto_tls" {
      actions = ["mqtt:mosquitto"]
      description = ""
      metadata {created_at = 1674754150821}
      sql = "SELECT * FROM \"t/#\""
    }
  }
}
